openapi: 3.0.0
info:
  title: Töri
  version: '1.0'
  description: |
    Version 1.0 of Töri Api
  contact: {}
servers:
  - url: 'http://localhost:3000'
    description: local
  - description: Web
    url: 'https://thetoriapp.herokuapp.com'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    userid: 1
                    firstName: string
                    lastName: string
                    email: email@domain.com
                    password: pa$$word
        '400':
          description: Wrong email
      operationId: get-users-userId
      description: |-
        Checks your JWY token for your email
        Then check the database if that email exist and has user then gives the data of that user
      security:
        - JWT: []
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '501':
          description: ''
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
        description: Patch user properties to update.
  /register:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created Succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example:
                  value:
                    firstName: test
                    lastName: test
                    email: email@domain.com
                    password: 3123asdasd4343525
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  firstName: string
                  lastName: string
                  email: email@domain.com
                  password: pa$$word
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  /login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: 'OK here is your token dont loose it :)'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT-Payload'
              examples: {}
            application/xml:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          description: Invalid email or password.
          content:
            application/json:
              schema:
                description: ''
                type: object
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
        description: ''
      security:
        - basic login to get the token: []
      description: Here you can login with registered user and you are given an JWT token what then you can use to create new items or accsess protected paths
  /items/category:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: Send all the items it found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: No items found
        '500':
          description: '''Something went wrong'''
      operationId: get-items-category
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                  example: Furniture
        description: ''
      description: send a categoty of item you want to find
    parameters: []
  /Items/location:
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: '"all the items"'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: No items found
        '500':
          description: Something went wrong
      operationId: get-Items-location-location
      description: Send the location what you want to find items in.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                location:
                  type: string
                  description: Oulu
              required:
                - location
        description: ''
    parameters: []
  /items:
    post:
      summary: ''
      operationId: post-items
      responses:
        '200':
          description: OK
      security:
        - JWT: []
      description: |-
        User created a item.
        Neeeds to be logged in
        User uses the jwt token given when logging in
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example-1:
                value:
                  Title: string
                  Description: string
                  Category: string
                  Location: string
                  Price: 1
                  Delivery type: string
                  i:
                    - image: string
        description: ''
    get:
      summary: ''
      operationId: get-items
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
            application/xml:
              schema:
                $ref: '#/components/schemas/Item'
        '400':
          description: No items found
        '500':
          description: Something went wrong
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                iditem:
                  type: number
                  description: Automatically generated when item is created in database
                  minimum: 1
              required:
                - iditem
            examples:
              example-1:
                value:
                  iditem: 1
        description: ''
      description: |-
        Get item by Id
        Can be get all data from single item
  /User:
    get:
      summary: test
      tags: []
      responses: {}
      operationId: get-User
    post:
      summary: test
      tags: []
      responses: {}
      operationId: post-User
components:
  schemas:
    User:
      title: User
      type: object
      description: User information
      x-examples:
        Alice Smith:
          userid: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          password: dasd4554ffsfasvz
      properties:
        userid:
          type: integer
          description: 'Unique identifier for the given user. '
          minimum: 1
          example: 1
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
          example: email@domain.com
        password:
          type: string
          description: Password for user hashed
          format: password
          example: 3123asdasd4343525
      required:
        - firstName
        - lastName
        - email
        - password
    Item:
      title: Item
      type: object
      x-examples:
        example-1:
          Title: string
          Description: string
          Category: string
          Location: string
          Price: 1
          Delivery type: string
          image: table.jpg
      description: |-
        Item registered user wants to sell.
        User needs to give Title,location,category and price others are optional.
        Image can be jpg or png
      properties:
        Title:
          type: string
        Description:
          type: string
        Category:
          type: string
        Location:
          type: string
        Price:
          type: number
          minimum: 1
        Delivery type:
          type: string
          description: |
            Pickup,postage
        image:
          type:
            - string
            - array
          description: 'Images done with multipart/form data, Api accecpts up to 6 images, send the with same name file name'
          format: byte
          items:
            type: string
      required:
        - Title
        - Category
        - Location
        - Price
        - Delivery type
    JWT-Payload:
      description: When user logs in this is loaded into the jwt payload what is used to auth
      type: object
      x-examples:
        example-1:
          email: test@test.com
          iat: '2019-08-24T14:15:22Z'
          userid: '1'
        example-2:
          email: string
          iat: '2019-08-24T14:15:22Z'
          userid: string
      properties:
        email:
          type: string
          description: User login
        iat:
          type: string
          format: date-time
          description: time when token was issued
        userid:
          type: string
          example: '1'
          description: |
            Automatic
      required:
        - email
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      description: ''
    basic login to get the token:
      type: http
      scheme: basic
  parameters: {}
