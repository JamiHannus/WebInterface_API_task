openapi: 3.0.0
info:
  title: Töri
  version: '1.0'
  description: |-
    Version 1.0 of Töri Api
    Has
  contact: {}
servers:
  - url: 'http://localhost:3000'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    userid: 1
                    firstName: string
                    lastName: string
                    email: email@domain.com
                    password: pa$$word
        '401':
          description: Need to be logged in
      operationId: get-users-userId
      description: |-
        Retrieve the information of the user with the matching user ID.
        Also could be used for get all items? for this user.
        For possible profile page
      security:
        - JWT: []
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example-1:
                  value:
                    userid: 1
                    firstName: string
                    lastName: string
                    email: email@domain.com
                    password: pa$$word
        '404':
          description: User Not Found
      description: Update the infromation of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
        description: Patch user properties to update.
  /register:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created Succesfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
        '500':
          description: Internal Server Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              example-1:
                value:
                  firstName: string
                  lastName: string
                  email: email@domain.com
                  password: pa$$word
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  /Items:
    put:
      summary: ''
      operationId: put-Items
      responses:
        '200':
          description: Item created
          headers: {}
        '400':
          description: Creation failed
        '401':
          description: Need to be logged in
      description: User creates a new item to be sold
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example-1:
                value:
                  itemId: 1
                  Title: Table
                  Description: Small red table
                  Category: Furniture
                  Location: Oulu
                  Price: 5 euros
                  Delivery type: Pickup
                  sellerId: 1 (sellers id)
                  Date of posting: '2019-08-24'
                  image1: string
                  image2: string
                  image3: string
                  image4: string
                  image5: string
                  image6: string
          application/xml:
            schema:
              type: object
              properties: {}
        description: ''
      parameters: []
      security:
        - JWT: []
    parameters:
      - required: true
    get:
      summary: ''
      operationId: get-Items
      responses:
        '200':
          description: OK here are the items
        '400':
          description: Something went wrong
      parameters:
        - schema:
            type: string
          in: query
          name: Category
          description: Query by category of items
        - schema:
            type: string
          in: query
          name: Location
          description: Query by location of items
        - schema:
            type: number
          in: query
          name: Date of posting
          description: Query by location of time
      description: Get items with with query paramaters
  '/items/{itemId}':
    parameters:
      - schema:
          type: number
        name: itemId
        in: path
        required: true
    get:
      summary: Your GET endpoint
      tags: []
      responses:
        '200':
          description: 'Here is the item by {Id}'
        '400':
          description: No item by the id
      operationId: get-items-itemId
      description: Get the item by the Id
    delete:
      summary: ''
      operationId: delete-items-itemId
      responses:
        '200':
          description: OK item was removed
        '400':
          description: Wrong item id
        '401':
          description: Need to be logged in to remove a item
      description: Delete item by itemId
      security:
        - JWT: []
    patch:
      summary: ''
      operationId: patch-items-itemId
      responses:
        '200':
          description: Item updated
        '400':
          description: Something went wrong
        '401':
          description: User needts to be logged in
      description: Edit a property of already existing item
      security:
        - JWT: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
            examples:
              example-1:
                value:
                  itemId: 500
                  Title: string
                  Description: string
                  Category: string
                  Location: string
                  Images:
                    - file1: string
                      file2: string
                      file3: string
                      file4: string
                      file5: string
                      file6: string
                  Price: 0
                  Date posted: 0
                  Delivery type: string
                  sellerId: Sellers Id
        description: User edits already exsisting item posting
  /login:
    post:
      summary: ''
      operationId: post-login
      responses:
        '200':
          description: 'OK here is your autohirization token dont loose it :)'
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT-Payload'
              examples:
                example:
                  value:
                    status:
                      type: string
                      message: string
                      code: 0
                      error: true
                    data:
                      - status: string
                        user:
                          email: string
                          firstname: string
                          userId: 0
                        expires_at: string
                        session_token: string
        '400':
          description: Invalid email or password.
          content:
            application/json:
              schema:
                description: ''
                type: object
              examples:
                example-1: {}
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
        description: ''
components:
  schemas:
    User:
      title: User
      type: object
      description: User information
      x-examples:
        Alice Smith:
          userid: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          password: dasd4554ffsfasvz
      properties:
        userid:
          type: integer
          description: 'Unique identifier for the given user. '
          minimum: 1
          example: 1
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
          example: email@domain.com
        password:
          type: string
          description: Password for user hashed
          format: password
          example: 3123asdasd4343525
      required:
        - firstName
        - lastName
        - email
        - password
    Item:
      title: Item
      type: object
      x-examples:
        example:
          itemId: 1
          Title: string
          Description: string
          Category: string
          Location: string
          Images:
            - file1: string
              file2: string
              file3: string
              file4: string
              file5: string
              file6: string
          Price: 0
          Date posted: 0
          Delivery type: string
          Seller:
            userid: 1
            firstName: string
            lastName: string
            email: email@domain.com
            password: 3123asdasd4343525
      description: |-
        Item registered user wants to sell.
        User needs to give Title,location,category and price others are optional.
      properties:
        itemId:
          type: number
          minimum: 1
          description: |
            Auto increment id
        Title:
          type: string
        Description:
          type: string
        Category:
          type: string
        Location:
          type: string
        Price:
          type: number
        Delivery type:
          type: string
          description: |
            Pickup,postage
        sellerId:
          type: string
          example: Sellers Id
          description: Automatically added from the security token
        Date of posting:
          type: string
          format: date
        image1:
          type: string
        image2:
          type: string
        image3:
          type: string
        image4:
          type: string
        image5:
          type: string
        image6:
          type: string
      required:
        - Title
        - Category
        - Location
        - Price
        - Delivery type
    JWT-Payload:
      description: When user logs in this is loaded into the jwt payload what is used to auth
      type: object
      x-examples:
        example-1:
          userid: 0
      properties:
        userId:
          type: number
          description: userID
        iat:
          type: number
          format: time
          description: time when token was issued
      required:
        - userId
  securitySchemes:
    JWT:
      type: http
      scheme: bearer
      description: ''
  parameters: {}
